import { PlayOptions } from '@pixi/sound';
import { AssetsManifest, UnresolvedAsset } from 'pixi.js';
import { IApplication } from '../../core/Application';
import { Signal } from '../../signals';
import { IModule, Module } from '../Module';
import { IAudioChannel } from './AudioChannel';
import { IAudioInstance } from './AudioInstance';
type SoundDetail = {
    id: string;
    instance: IAudioInstance;
    channelName: string;
};
type ChannelVolumeDetail = {
    channel: IAudioChannel;
    volume: number;
};
type ChannelName = 'music' | 'sfx' | 'voiceover' | string;
export interface IAudioManager extends IModule {
    onSoundStarted: Signal<(detail: SoundDetail) => void>;
    onSoundEnded: Signal<(detail: SoundDetail) => void>;
    onMasterVolumeChanged: Signal<(volume: number) => void>;
    onChannelVolumeChanged: Signal<(detail: ChannelVolumeDetail) => void>;
    onMuted: Signal<(muted: boolean) => void>;
    masterVolume: number;
    muted: boolean;
    channels: Map<string, IAudioChannel>;
    createChannel(name: string): void;
    play(soundId: string, channelName: ChannelName, options?: PlayOptions): Promise<IAudioInstance>;
    stop(soundId: string, channelName: ChannelName): IAudioInstance | undefined;
    setChannelVolume(channelName: ChannelName | ChannelName[], volume: number): void;
    getChannel(name: ChannelName): IAudioChannel | undefined;
    addAllFromManifest(manifest: AssetsManifest): void;
    addAllFromBundle(bundleName: string, manifest?: AssetsManifest | string | undefined): void;
    add(soundAsset: UnresolvedAsset): void;
    fade(soundId: string, channelName: ChannelName, props?: gsap.TweenVars): Promise<gsap.core.Tween | null>;
    fadeIn(soundId: string, channelName: ChannelName, props?: gsap.TweenVars): Promise<gsap.core.Tween | null>;
    fadeOut(soundId: string, channelName: ChannelName, props?: gsap.TweenVars): Promise<gsap.core.Tween | null>;
    crossFade(outSoundId: string, inSoundId: string, channelName: ChannelName, duration?: number): Promise<gsap.core.Tween | null>;
    mute(): void;
    unmute(): void;
    pause(): void;
    resume(): void;
}
export declare class AudioManager extends Module implements IAudioManager {
    onSoundStarted: Signal<(detail: SoundDetail) => void>;
    onSoundEnded: Signal<(detail: SoundDetail) => void>;
    onMuted: Signal<(muted: boolean) => void>;
    onMasterVolumeChanged: Signal<(volume: number) => void>;
    onChannelVolumeChanged: Signal<(detail: ChannelVolumeDetail) => void>;
    private _masterVolume;
    private _muted;
    private _paused;
    private _channels;
    constructor(id?: string);
    get masterVolume(): number;
    set masterVolume(value: number);
    get channels(): Map<string, IAudioChannel>;
    get muted(): boolean;
    set muted(value: boolean);
    destroy(): void;
    initialize(app: IApplication): Promise<void>;
    createChannel(name: string): void;
    setChannelVolume(channelName: ChannelName | ChannelName[], volume: number): void;
    getChannel(name: ChannelName): IAudioChannel | undefined;
    mute(): void;
    unmute(): void;
    pause(): void;
    resume(): void;
    addAllFromManifest(manifest: AssetsManifest): void;
    addAllFromBundle(bundleName: string, manifest?: AssetsManifest | string | undefined): void;
    add(soundAsset: UnresolvedAsset): void;
    play(soundId: string, channelName?: ChannelName, options?: PlayOptions): Promise<IAudioInstance>;
    stop(soundId: string, channelName?: ChannelName): IAudioInstance | undefined;
    fadeIn(soundId: string, channelName: string | undefined, props: gsap.TweenVars): Promise<gsap.core.Tween | null>;
    fadeOut(soundId: string, channelName?: ChannelName, props?: Partial<gsap.TweenVars>): Promise<gsap.core.Tween | null>;
    crossFade(outSoundId: string, inSoundId: string, channelName?: ChannelName, duration?: number): Promise<gsap.core.Tween | null>;
    fade(soundId: string, channelName: string | undefined, props: gsap.TweenVars, stopOnComplete?: boolean): Promise<gsap.core.Tween | null>;
    private _setMuted;
    private _setPaused;
    private _setChannelVolume;
    private _soundStarted;
    private _soundEnded;
}
export {};
//# sourceMappingURL=AudioManager.d.ts.map