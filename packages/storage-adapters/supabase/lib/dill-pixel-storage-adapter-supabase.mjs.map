{"version":3,"file":"dill-pixel-storage-adapter-supabase.mjs","sources":["../src/SupabaseAdapter.ts"],"sourcesContent":["import { StorageAdapter, Logger, IApplication, IStorageAdapter } from 'dill-pixel';\nimport { createClient } from '@supabase/supabase-js';\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { PostgrestFilterBuilder } from '@supabase/postgrest-js';\n\ntype SaveMethod = 'insert' | 'update' | 'upsert';\n\ntype Data = {\n  [key: string]: any;\n};\n\ninterface ISupabaseAdapterOptions {\n  supabaseUrl?: string;\n  anonKey?: string;\n}\n\nconst defaultConfig: ISupabaseAdapterOptions = {\n  supabaseUrl: process.env.VITE_SUPABASE_URL,\n  anonKey: process.env.VITE_SUPABASE_ANON_KEY,\n};\n\n// TODO: fix type error\nexport interface ISupabaseAdapter extends IStorageAdapter {\n  // client: SupabaseClient<Database>; // TODO: get this to work\n\n  initialize(app: IApplication, options?: Partial<ISupabaseAdapterOptions>): void;\n  save(tableId: string, data: Data, method?: SaveMethod): Promise<any>;\n  load(tableId: string, selectors: string[]): PostgrestFilterBuilder<any, any, any>;\n  delete(tableId: string, data: Data): Promise<any>;\n}\n\n/**\n * A class representing a storage adapter that uses Supabase.\n */\nexport class SupabaseAdapter<Database = any> extends StorageAdapter implements ISupabaseAdapter {\n  private _options: ISupabaseAdapterOptions;\n  private _supabase: SupabaseClient<Database>;\n\n  /**\n   * Returns the Supabase client.\n   * @returns {SupabaseClient<Database>} The Supabase client.\n   */\n  get client(): SupabaseClient<Database> {\n    return this._supabase as SupabaseClient<Database>;\n  }\n\n  /**\n   * Initializes the adapter.\n   * @param {IApplication} _app The application that the adapter belongs to.\n   * @param {ISupabaseAdapterOptions} options The options to initialize the adapter with.\n   * @returns {void}\n   */\n  public initialize(_app: IApplication, options: Partial<ISupabaseAdapterOptions> = {}): void {\n    Logger.log('SupabaseAdapter initialized');\n    this._options = { ...defaultConfig, ...options };\n\n    if (!this._options.supabaseUrl) {\n      throw new Error('Supabase URL is not set');\n    }\n    if (!this._options.anonKey) {\n      throw new Error('Supabase anon key is not set');\n    }\n\n    this._supabase = createClient<Database>(this._options.supabaseUrl, this._options.anonKey);\n  }\n\n  /**\n   * Saves data to a specified table in the Supabase database.\n   * @param {string} tableId The table to save the data to.\n   * @param {any} data The data to save.\n   * @param {SaveMethod} method The method to use for saving the data.\n   * @returns {Promise<any>} The saved data.\n   *\n   * @example\n   * await this.app.supabase.save('scores', { username: 'relish', score: 50 })\n   */\n  async save(tableId: string, data: any, method: SaveMethod = 'upsert'): Promise<any> {\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    const table = this.client.from(tableId);\n\n    try {\n      switch (method) {\n        case 'insert':\n          return await table.insert(data).select();\n        case 'update':\n          return await table.update(data).select();\n        case 'upsert':\n          return await table.upsert(data).select();\n      }\n    } catch (error) {\n      throw new Error(`Error saving data: ${error}`);\n    }\n  }\n\n  /**\n   * Loads data from a specified table in the Supabase database.\n   * @param {string} tableId The table from which to load the data.\n   * @param {string[]} selectors The columns to select. Default is '*'.\n   * @returns {PostgrestFilterBuilder<any, any, any>} PostgrestFilterBuilder // TODO\n   *\n   * @example\n   * await this.app.supabase.load('scores', ['score', 'username']).order('score', { ascending: false }).limit(5)\n   */\n\n  // TODO: sort out type error\n  load(tableId: string, selectors?: string[]): PostgrestFilterBuilder<any, any, any> {\n    return this.client.from(tableId).select(selectors?.join(','));\n  }\n\n  /**\n   * Deletes data from a specified table in the Supabase database.\n   * @param {string} tableId The table from which to load the data.\n   * @param {DeleteData} data The data to delete.\n   * @returns {Promise<any>} The deleted data.\n   *\n   * @example\n   * await this.app.supabase.delete('scores', { username: 'relish', score: 50 })\n   */\n\n  async delete(tableId: string, data: Data): Promise<any> {\n    const column = Object.keys(data)[0];\n    const value = data[column];\n    try {\n      return await this.client.from(tableId).delete().eq(column, value).select();\n    } catch (error) {\n      throw new Error(`Error deleting data: ${error}`);\n    }\n  }\n}\n"],"names":["defaultConfig","SupabaseAdapter","StorageAdapter","_app","options","Logger","createClient","tableId","data","method","table","error","selectors","column","value"],"mappings":";;AAgBA,MAAMA,IAAyC;AAAA,EAC7C,aAAa,YAAY,IAAA;AAAA,EACzB,SAAS,YAAY,IAAA;AACvB;AAeO,MAAMC,UAAwCC,EAA2C;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ9F,IAAI,SAAmC;AACrC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAWC,GAAoBC,IAA4C,IAAU;AAItF,QAHJC,EAAO,IAAI,6BAA6B,GACxC,KAAK,WAAW,EAAE,GAAGL,GAAe,GAAGI,EAAQ,GAE3C,CAAC,KAAK,SAAS;AACX,YAAA,IAAI,MAAM,yBAAyB;AAEvC,QAAA,CAAC,KAAK,SAAS;AACX,YAAA,IAAI,MAAM,8BAA8B;AAGhD,SAAK,YAAYE,EAAuB,KAAK,SAAS,aAAa,KAAK,SAAS,OAAO;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,KAAKC,GAAiBC,GAAWC,IAAqB,UAAwB;AAClF,IAAK,MAAM,QAAQD,CAAI,MACrBA,IAAO,CAACA,CAAI;AAEd,UAAME,IAAQ,KAAK,OAAO,KAAKH,CAAO;AAElC,QAAA;AACF,cAAQE,GAAQ;AAAA,QACd,KAAK;AACH,iBAAO,MAAMC,EAAM,OAAOF,CAAI,EAAE,OAAO;AAAA,QACzC,KAAK;AACH,iBAAO,MAAME,EAAM,OAAOF,CAAI,EAAE,OAAO;AAAA,QACzC,KAAK;AACH,iBAAO,MAAME,EAAM,OAAOF,CAAI,EAAE,OAAO;AAAA,MAC3C;AAAA,aACOG,GAAO;AACd,YAAM,IAAI,MAAM,sBAAsBA,CAAK,EAAE;AAAA,IAC/C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,KAAKJ,GAAiBK,GAA6D;AAC1E,WAAA,KAAK,OAAO,KAAKL,CAAO,EAAE,OAAOK,KAAA,gBAAAA,EAAW,KAAK,IAAI;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,OAAOL,GAAiBC,GAA0B;AACtD,UAAMK,IAAS,OAAO,KAAKL,CAAI,EAAE,CAAC,GAC5BM,IAAQN,EAAKK,CAAM;AACrB,QAAA;AACF,aAAO,MAAM,KAAK,OAAO,KAAKN,CAAO,EAAE,OAAO,EAAE,GAAGM,GAAQC,CAAK,EAAE,OAAO;AAAA,aAClEH,GAAO;AACd,YAAM,IAAI,MAAM,wBAAwBA,CAAK,EAAE;AAAA,IACjD;AAAA,EACF;AACF;"}